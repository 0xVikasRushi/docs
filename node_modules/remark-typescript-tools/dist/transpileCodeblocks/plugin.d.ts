import { CompilerSettings, TranspiledFile } from './compiler';
import type { Plugin } from 'unified';
import type { Node } from 'unist';
import type { VFile } from 'vfile';
export interface VirtualFile {
    code: string;
    skip?: boolean;
}
export declare type VirtualFiles = Record<string, VirtualFile>;
interface CodeNode extends Node {
    lang: string;
    meta: string;
    value: string;
    indent: number[];
}
declare type PostProcessor = (files: VirtualFiles, parentFile?: string, defaultProcessor?: PostProcessor) => VirtualFiles;
export interface Settings {
    compilerSettings: CompilerSettings;
    postProcessTranspiledJs?: PostProcessor;
    postProcessTs?: PostProcessor;
    assembleReplacementNodes?: typeof defaultAssembleReplacementNodes;
    fileExtensions?: string[];
}
export declare const attacher: Plugin<[Settings]>;
declare function defaultAssembleReplacementNodes(node: CodeNode, file: VFile, virtualFolder: string, virtualFiles: Record<string, VirtualFile>, transpilationResult: Record<string, TranspiledFile>, postProcessTs: PostProcessor, postProcessTranspiledJs: PostProcessor): ({
    type: string;
    value: string;
} | {
    value: string;
    lang: string;
    meta: string;
    indent: number[];
    type: string;
    data?: import("unist").Data | undefined;
    position?: import("unist").Position | undefined;
})[];
export {};
