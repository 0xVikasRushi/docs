{"version":3,"file":"remark-typescript-tools.esm.js","sources":["../src/linkDocblocks/utils.ts","../src/linkDocblocks/extract.ts","../src/linkDocblocks/plugin.ts","../src/transpileCodeblocks/compiler.ts","../src/transpileCodeblocks/postProcessing.ts","../src/transpileCodeblocks/plugin.ts"],"sourcesContent":["import ts from 'typescript';\nimport * as tsdoc from '@microsoft/tsdoc';\n\n/**\n * Retrieves the JSDoc-style comments associated with a specific AST node.\n *\n * Based on ts.getJSDocCommentRanges() from the compiler.\n * https://github.com/Microsoft/TypeScript/blob/v3.0.3/src/compiler/utilities.ts#L924\n */\nexport function getJSDocCommentRanges(node: ts.Node, text: string) {\n  /** @type {import('typescript').CommentRange[]} */\n  const commentRanges: ts.CommentRange[] = [];\n\n  switch (node.kind) {\n    case ts.SyntaxKind.Parameter:\n    case ts.SyntaxKind.TypeParameter:\n    case ts.SyntaxKind.FunctionExpression:\n    case ts.SyntaxKind.ArrowFunction:\n    case ts.SyntaxKind.ParenthesizedExpression:\n    case ts.SyntaxKind.VariableDeclaration:\n    case ts.SyntaxKind.VariableStatement:\n      commentRanges.push(\n        ...(ts.getTrailingCommentRanges(text, node.pos) || [])\n      );\n      break;\n  }\n  commentRanges.push(...(ts.getLeadingCommentRanges(text, node.pos) || []));\n\n  // True if the comment starts with '/**' but not if it is '/**/'\n  return commentRanges.filter(\n    (comment) =>\n      text.charCodeAt(comment.pos + 1) ===\n        0x2a /* ts.CharacterCodes.asterisk */ &&\n      text.charCodeAt(comment.pos + 2) ===\n        0x2a /* ts.CharacterCodes.asterisk */ &&\n      text.charCodeAt(comment.pos + 3) !== 0x2f /* ts.CharacterCodes.slash */\n  );\n}\n\nexport function renderDocNode(\n  docNode?: tsdoc.DocNode | tsdoc.DocNode[]\n): string {\n  if (!docNode) {\n    return '';\n  }\n  if (Array.isArray(docNode)) {\n    return docNode.map((node) => renderDocNode(node)).join('');\n  }\n\n  let result = '';\n  if (docNode) {\n    if (docNode instanceof tsdoc.DocFencedCode) {\n      let code: string = docNode.code.toString();\n      let meta: string = '';\n      code = code.replace(\n        /^\\s*\\/\\/\\s*codeblock-meta(\\s.*?)$\\n?/gm,\n        (_line, metaMatch) => {\n          meta += metaMatch;\n          return '';\n        }\n      );\n      return '```' + docNode.language + meta + '\\n' + code + '\\n```';\n    }\n    if (docNode instanceof tsdoc.DocExcerpt) {\n      result += docNode.content.toString();\n    }\n\n    for (const childNode of docNode.getChildNodes()) {\n      result += renderDocNode(childNode);\n    }\n  }\n  return result;\n}\n","import ts from 'typescript';\nimport path from 'path';\nimport * as tsdoc from '@microsoft/tsdoc';\n\nimport { getJSDocCommentRanges } from './utils';\n\nexport interface ExtractorSettings {\n  tsconfig: string;\n  basedir: string;\n  rootFiles: string[];\n}\n\nexport class Extractor {\n  program: ts.Program;\n  basedir: string;\n\n  constructor({ tsconfig, rootFiles, basedir }: ExtractorSettings) {\n    this.basedir = basedir;\n\n    const configFile = ts.readConfigFile(tsconfig, ts.sys.readFile);\n    const compilerOptions = ts.parseJsonConfigFileContent(\n      configFile.config,\n      ts.sys,\n      './'\n    ).options;\n\n    const compilerHost = ts.createCompilerHost(compilerOptions);\n\n    this.program = ts.createProgram(\n      rootFiles.map((file) => path.resolve(basedir, file)),\n      compilerOptions,\n      compilerHost\n    );\n  }\n\n  findTokens(token: string, node: ts.Node) {\n    const [lookFor, ...tail] = token.split('.');\n    const found: ts.Node[] = [];\n    node.forEachChild((child: ts.Node & { name?: ts.Node }) => {\n      if (ts.isVariableStatement(child)) {\n        found.push(...this.findTokens(token, child.declarationList));\n        if (child.declarationList.declarations.length === 1) {\n          const name = child.declarationList.declarations[0].name;\n          if (name && ts.isIdentifier(name) && name.escapedText === lookFor) {\n            // push the whole declarationList if it contains only one declaration, for \"outside style\"\n            found.push(child);\n          }\n        }\n        return;\n      }\n\n      const name = child.name;\n      if (name && ts.isIdentifier(name) && name.escapedText === lookFor) {\n        if (lookFor === token) {\n          if (ts.isVariableDeclaration(child) && child.initializer) {\n            // push the initializer for \"inside\" style\n            found.push(child.initializer);\n          }\n          found.push(child);\n        } else {\n          found.push(...this.findTokens(tail.join('.'), child));\n        }\n      }\n    });\n    return found;\n  }\n\n  getComment(token: string, fileName = 'index.ts', overload = 0) {\n    const inputFileName = path.resolve(this.basedir, fileName);\n    const sourceFile = this.program.getSourceFile(inputFileName);\n    if (!sourceFile) {\n      throw new Error(\n        `Error retrieving source file ${sourceFile} (looked for ${fileName} in ${this.basedir})`\n      );\n    }\n\n    const foundComments = [];\n\n    const buffer = sourceFile.getFullText();\n\n    for (const node of this.findTokens(token, sourceFile)) {\n      const comments = getJSDocCommentRanges(node, buffer);\n\n      if (comments.length > 0) {\n        for (const comment of comments) {\n          foundComments.push({\n            compilerNode: node,\n            textRange: tsdoc.TextRange.fromStringRange(\n              buffer,\n              comment.pos,\n              comment.end\n            ),\n          });\n        }\n      }\n    }\n\n    const customConfiguration = new tsdoc.TSDocConfiguration();\n\n    customConfiguration.addTagDefinition(\n      new tsdoc.TSDocTagDefinition({\n        tagName: '@overloadSummary',\n        syntaxKind: tsdoc.TSDocTagSyntaxKind.BlockTag,\n      })\n    );\n\n    customConfiguration.addTagDefinition(\n      new tsdoc.TSDocTagDefinition({\n        tagName: '@overloadRemarks',\n        syntaxKind: tsdoc.TSDocTagSyntaxKind.BlockTag,\n      })\n    );\n\n    const tsdocParser = new tsdoc.TSDocParser(customConfiguration);\n\n    const selectedOverload = foundComments[overload];\n    if (!selectedOverload) {\n      console.warn(\n        `could not find overload ${overload} for ${token} in ${fileName}`\n      );\n      return null;\n    }\n\n    const parserContext = tsdocParser.parseRange(selectedOverload.textRange);\n    const docComment = parserContext.docComment;\n    return Object.assign(docComment, {\n      parserContext,\n      buffer: selectedOverload.textRange.buffer,\n      overloadSummary: docComment.customBlocks.find(\n        this.byTagName('@overloadSummary')\n      ),\n      overloadRemarks: docComment.customBlocks.find(\n        this.byTagName('@overloadRemarks')\n      ),\n      examples: docComment.customBlocks.filter(this.byTagName('@example')),\n    });\n  }\n\n  byTagName(name: string) {\n    return (block: tsdoc.DocBlock) => block.blockTag.tagName === name;\n  }\n}\n","// @ts-ignore\nimport flatMap from 'unist-util-flatmap';\nimport { Extractor, ExtractorSettings } from './extract';\nimport { renderDocNode } from './utils';\nimport { URL } from 'url';\nimport type { Node, Parent } from 'unist';\nimport visit from 'unist-util-visit';\n\nimport type { Plugin } from 'unified';\nimport type { DocNode } from '@microsoft/tsdoc';\n\ntype Comment = NonNullable<ReturnType<Extractor['getComment']>>;\ntype RenderFunction = (c: Comment) => import('unist').Node[];\n\ntype RenderableKey = {\n  [K in keyof Comment]: NonNullable<Comment[K]> extends DocNode | DocNode[]\n    ? K\n    : never;\n}[keyof Comment];\n\nexport interface Settings {\n  extractorSettings: ExtractorSettings;\n}\n\nconst extractors = new WeakMap<ExtractorSettings, Extractor>();\n\nexport const attacher: Plugin<[Settings]> = function ({ extractorSettings }) {\n  if (!extractors.has(extractorSettings)) {\n    extractors.set(extractorSettings, new Extractor(extractorSettings));\n  }\n  const extractor = extractors.get(extractorSettings)!;\n\n  const parseNodes = (markdown: string): Node[] => {\n    return (this.parse(markdown) as Parent).children;\n  };\n\n  function renderAsMarkdown(\n    key: RenderableKey,\n    prepare = (str: string) => str\n  ): RenderFunction {\n    function render(comment: Comment) {\n      const docBlock = comment[key];\n      const rendered = renderDocNode(docBlock);\n      return parseNodes(prepare(rendered));\n    }\n    return render;\n  }\n\n  const sectionMapping = {\n    summary: renderAsMarkdown('summarySection', (s) =>\n      s.replace(/@summary/g, '')\n    ),\n    remarks: renderAsMarkdown('remarksBlock', (s) =>\n      s.replace(/@remarks/g, '')\n    ),\n    overloadSummary: renderAsMarkdown('overloadSummary', (s) =>\n      s.replace(/@overloadSummary/g, '')\n    ),\n    overloadRemarks: renderAsMarkdown('overloadRemarks', (s) =>\n      s.replace(/@overloadRemarks/g, '')\n    ),\n    examples: renderAsMarkdown('examples', (s) => s.replace(/@example/g, '')),\n    params: renderAsMarkdown('params', (s) =>\n      s.replace(/@param (.*) -/g, '* **$1**')\n    ),\n  };\n\n  return function transformer(tree) {\n    return flatMap(tree, function mapper(parent: Parent): Node[] {\n      if (!(parent.type === 'paragraph' && parent.children.length === 1)) {\n        return [parent];\n      }\n\n      const node = parent.children[0] as Node & {\n        url: string;\n        children: [import('unist').Node & { value: string }];\n      };\n\n      if (node.type !== 'link' || !node.url.startsWith('docblock://')) {\n        return [parent];\n      }\n\n      if (node.children.length !== 1 || node.children[0].type !== 'text') {\n        throw new Error('invalid meta content for docblock link');\n      }\n      const meta = node.children[0].value;\n      const sections = meta.split(',').map((s) => s.trim());\n\n      const url = new URL(node.url);\n      const fileName = url.host + url.pathname;\n      const args = url.searchParams;\n\n      const token = args.get('token');\n      const overload = Number.parseInt(args.get('overload') || '0');\n\n      if (!token) {\n        throw new Error(\n          'token name must be provided as query parameter `token`'\n        );\n      }\n\n      const comment = extractor.getComment(token, fileName, overload);\n      if (!comment) {\n        return [];\n      }\n\n      const retVal = sections.reduce<Node[]>((acc, section) => {\n        if (!(section in sectionMapping)) {\n          throw new Error(\n            `invalid comment section reference. valid references are ${Object.keys(\n              sectionMapping\n            ).concat(',')}`\n          );\n        }\n        acc.push(\n          ...sectionMapping[section as keyof typeof sectionMapping](comment)\n        );\n        return acc;\n      }, []);\n\n      visit<\n        Node & { value: string }\n      >({ type: 'fakeRoot', children: retVal }, 'code', (node) => {\n        node.value = node.value.trimEnd();\n      });\n\n      return retVal;\n    });\n  };\n};\n","import ts from 'typescript';\nimport { normalize } from 'path';\n\nimport { VirtualFiles, VirtualFile } from './plugin';\n\nexport type Diagnostic =\n  | { line: number; character: number; message: string }\n  | { line?: undefined; character?: undefined; message: string };\n\nexport interface TranspiledFile extends VirtualFile {\n  diagnostics: Array<Diagnostic>;\n}\n\nexport type TranspiledFiles = Record<string, TranspiledFile>;\n\nexport interface ExternalResolution {\n  resolvedPath: string;\n  packageId: ts.PackageId;\n}\n\nexport interface CompilerSettings {\n  tsconfig: string;\n  externalResolutions: Record<string, ExternalResolution>;\n}\n\nexport class Compiler {\n  private service: ts.LanguageService;\n  private compilerOptions: ts.CompilerOptions;\n  private compilerHost: ReturnType<typeof createCompilerHost>;\n\n  constructor(settings: CompilerSettings) {\n    const configFile = ts.readConfigFile(settings.tsconfig, ts.sys.readFile);\n    this.compilerOptions = ts.parseJsonConfigFileContent(\n      configFile.config,\n      ts.sys,\n      './'\n    ).options;\n\n    this.compilerHost = createCompilerHost(\n      this.compilerOptions,\n      settings.externalResolutions\n    );\n    this.service = ts.createLanguageService(\n      this.compilerHost,\n      ts.createDocumentRegistry()\n    );\n  }\n\n  public compile(files: VirtualFiles) {\n    // console.log(compilerOptions)\n\n    this.compilerHost.setScriptFileNames([]);\n    for (let [fileName, { code }] of Object.entries(files)) {\n      code = code.replace(/^$/gm, '//__NEWLINE__');\n      this.compilerHost.writeFile(fileName, code);\n    }\n    this.compilerHost.setScriptFileNames(Object.keys(files));\n\n    const returnFiles: TranspiledFiles = {};\n\n    for (const [fileName] of Object.entries(files)) {\n      const emitResult = this.service.getEmitOutput(fileName);\n      const emittedFile = emitResult.outputFiles.find(\n        ({ name }) => name.endsWith('.js') || name.endsWith('.jsx')\n      );\n      const transpiledCode = emittedFile\n        ? emittedFile.text.replace(/\\/\\/__NEWLINE__/g, '')\n        : '';\n\n      const allDiagnostics = this.service\n        .getCompilerOptionsDiagnostics()\n        .concat(this.service.getSyntacticDiagnostics(fileName))\n        .concat(this.service.getSemanticDiagnostics(fileName));\n\n      const diagnostics = allDiagnostics.map((diagnostic) => {\n        const message = ts.flattenDiagnosticMessageText(\n          diagnostic.messageText,\n          '\\n'\n        );\n        if (diagnostic.file && diagnostic.start) {\n          const {\n            line,\n            character,\n          } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n          return { line, character, message };\n        }\n        return { message };\n      });\n      returnFiles[fileName] = {\n        ...files[fileName],\n        code: transpiledCode,\n        diagnostics,\n      };\n    }\n\n    return returnFiles;\n  }\n}\n\nfunction createCompilerHost(\n  compilerOptions: ts.CompilerOptions,\n  externalResolutions: CompilerSettings['externalResolutions']\n): ts.LanguageServiceHost &\n  ts.ModuleResolutionHost &\n  Required<Pick<ts.LanguageServiceHost, 'writeFile'>> & {\n    setScriptFileNames(files: string[]): void;\n  } {\n  const virtualFiles: Record<\n    string,\n    { contents: string; version: number }\n  > = {};\n  let scriptFileNames: string[] = [];\n\n  return {\n    ...ts.createCompilerHost(compilerOptions),\n    getCompilationSettings() {\n      return compilerOptions;\n    },\n    fileExists(fileName) {\n      // console.log('fileExists', fileName)\n      return !!virtualFiles[normalize(fileName)] || ts.sys.fileExists(fileName);\n    },\n    readFile(fileName: string) {\n      // console.log('readFile', fileName)\n      const virtual = virtualFiles[normalize(fileName)];\n      return virtual ? virtual.contents : ts.sys.readFile(fileName);\n    },\n    writeFile(fileName, contents) {\n      fileName = normalize(fileName);\n      let version = virtualFiles[fileName] ? virtualFiles[fileName].version : 1;\n      if (\n        virtualFiles[fileName] &&\n        virtualFiles[fileName].contents !== contents\n      ) {\n        version++;\n      }\n      virtualFiles[fileName] = { contents, version };\n    },\n    directoryExists(dirName) {\n      const normalized = normalize(dirName + '/');\n      return (\n        scriptFileNames.some((fileName) => fileName.startsWith(normalized)) ||\n        ts.sys.directoryExists(dirName)\n      );\n    },\n    setScriptFileNames(files) {\n      scriptFileNames = files.map(normalize);\n      // console.log({ virtualFiles, scriptFileNames })\n    },\n    getScriptFileNames() {\n      return scriptFileNames;\n    },\n    getScriptSnapshot(fileName) {\n      const contents = this.readFile(fileName);\n      return contents ? ts.ScriptSnapshot.fromString(contents) : undefined;\n    },\n    getScriptVersion(fileName) {\n      const virtual = virtualFiles[normalize(fileName)];\n      return virtual\n        ? virtual.version.toString()\n        : String(\n            (ts.sys.getModifiedTime && ts.sys.getModifiedTime(fileName)) ||\n              'unknown, will not update without restart'\n          );\n    },\n    resolveModuleNames(moduleNames, containingFile) {\n      return moduleNames.map((moduleName) => {\n        if (moduleName in externalResolutions) {\n          const resolved = externalResolutions[moduleName];\n\n          const resolvedModule = ts.resolveModuleName(\n            resolved.resolvedPath,\n            containingFile,\n            compilerOptions,\n            this\n          ).resolvedModule;\n          if (!resolvedModule) {\n            throw new Error(`external resolution ${moduleName} not found`);\n          }\n          return {\n            ...resolvedModule,\n            packageId: resolved.packageId,\n          };\n        }\n\n        return ts.resolveModuleName(\n          moduleName,\n          containingFile,\n          compilerOptions,\n          this\n        ).resolvedModule;\n      });\n    },\n  };\n}\n","import { VirtualFiles } from './plugin';\nimport prettier from 'prettier';\n\nexport function postProcessTs(\n  files: VirtualFiles,\n  parentFile?: string\n): VirtualFiles {\n  return fromEntries(\n    Object.entries(files).map(([name, file]) => {\n      const prettyCode = prettify(file.code, name, parentFile || name);\n\n      return [\n        name,\n        {\n          ...file,\n          code: prettyCode.trim(),\n        },\n      ];\n    })\n  );\n}\n\nexport function postProcessTranspiledJs(\n  files: VirtualFiles,\n  parentFile?: string\n): VirtualFiles {\n  return fromEntries(\n    Object.entries(files).map(([name, file]) => {\n      const mangledCode = file.code.replace(\n        /(\\n\\s*|)\\/\\/ (@ts-ignore|@ts-expect-error).*$/gm,\n        ''\n      );\n      const prettyCode = prettify(mangledCode, name, parentFile || name);\n\n      return [\n        name,\n        {\n          ...file,\n          code: prettyCode.trim(),\n        },\n      ];\n    })\n  );\n}\n\nlet lastConfig: prettier.Options | null;\nlet lastParentFile: string;\n\n/**\n *\n * @param {string} sourceCode\n * @param {string} fileName\n * @param {string} parentFile\n */\nfunction prettify(sourceCode: string, fileName: string, parentFile: string) {\n  if (lastParentFile !== parentFile) {\n    lastConfig = prettier.resolveConfig.sync(parentFile);\n  }\n  if (!lastConfig) {\n    console.error(\n      `no prettier config found for ${parentFile}, skipping prettier step`\n    );\n    return sourceCode;\n  }\n  return prettier.format(sourceCode, {\n    ...lastConfig,\n    filepath: fileName,\n  });\n}\n\nfunction fromEntries<T>(entries: Array<[string, T]>): Record<string, T> {\n  const ret: Record<string, T> = {};\n  for (const [key, value] of entries) {\n    ret[key] = value;\n  }\n  return ret;\n}\n","import visit from 'unist-util-visit';\n// @ts-ignore\nimport flatMap from 'unist-util-flatmap';\nimport { Compiler, CompilerSettings, TranspiledFile } from './compiler';\nimport {\n  postProcessTranspiledJs as defaultPostProcessTranspiledJs,\n  postProcessTs as defaultPostProcessTs,\n} from './postProcessing';\nimport type { Plugin } from 'unified';\nimport type { Node, Parent } from 'unist';\nimport type { VFile } from 'vfile';\n\nexport interface VirtualFile {\n  code: string;\n  skip?: boolean;\n}\nexport type VirtualFiles = Record<string, VirtualFile>;\n\ninterface CodeNode extends Node {\n  lang: string;\n  meta: string;\n  value: string;\n  indent: number[];\n}\n\ntype PostProcessor = (\n  files: VirtualFiles,\n  parentFile?: string,\n  defaultProcessor?: PostProcessor\n) => VirtualFiles;\n\nexport interface Settings {\n  compilerSettings: CompilerSettings;\n  postProcessTranspiledJs?: PostProcessor;\n  postProcessTs?: PostProcessor;\n  assembleReplacementNodes?: typeof defaultAssembleReplacementNodes;\n  fileExtensions?: string[];\n}\n\nconst compilers = new WeakMap<CompilerSettings, Compiler>();\n\nexport const attacher: Plugin<[Settings]> = function ({\n  compilerSettings,\n  postProcessTranspiledJs = defaultPostProcessTranspiledJs,\n  postProcessTs = defaultPostProcessTs,\n  assembleReplacementNodes = defaultAssembleReplacementNodes,\n  fileExtensions = ['.mdx'],\n}) {\n  if (!compilers.has(compilerSettings)) {\n    compilers.set(compilerSettings, new Compiler(compilerSettings));\n  }\n  const compiler = compilers.get(compilerSettings)!;\n\n  return function transformer(tree, file) {\n    if (!file.extname || !fileExtensions.includes(file.extname)) {\n      return tree;\n    }\n\n    let hasTabsImport = false;\n    let hasTabItemImport = false;\n\n    visit<Node & { value: string }>(tree, 'import', (node) => {\n      if (/\\bTabs\\b/.test(node.value)) hasTabsImport = true;\n      if (/\\bTabItem\\b/.test(node.value)) hasTabItemImport = true;\n    });\n\n    visit<Parent>(tree, 'root', (node) => {\n      if (!hasTabsImport) {\n        node.children.unshift({\n          type: 'import',\n          value: `import Tabs from '@theme/Tabs'`,\n        });\n      }\n      if (!hasTabItemImport) {\n        node.children.unshift({\n          type: 'import',\n          value: `import TabItem from '@theme/TabItem'`,\n        });\n      }\n    });\n\n    let codeBlock = 0;\n\n    return flatMap(tree, function mapper(node: CodeNode): Node[] {\n      if (node.type === 'code') {\n        codeBlock++;\n      }\n      if (!(node.type === 'code' && node.lang === 'ts')) {\n        return [node];\n      }\n      const tags = node.meta ? node.meta.split(' ') : [];\n      if (tags.includes('no-transpile')) {\n        return [node];\n      }\n\n      const virtualFolder = `${file.path}/codeBlock_${codeBlock}`;\n      const virtualFiles = splitFiles(node.value, virtualFolder);\n\n      //console.time(virtualFolder)\n      const transpilationResult = compiler.compile(virtualFiles);\n      //console.timeEnd(virtualFolder)\n\n      for (const [fileName, result] of Object.entries(transpilationResult)) {\n        for (const diagnostic of result.diagnostics) {\n          if (diagnostic.line && node.position) {\n            const lines = result.code\n              .split('\\n')\n              .map(\n                (line, lineNo) => `${String(lineNo).padStart(3, ' ')}  ${line}`\n              );\n\n            file.fail(\n              `\nTypeScript error in code block in line ${diagnostic.line} of ${fileName}\n${diagnostic.message}\n\n${lines.slice(Math.max(0, diagnostic.line - 5), diagnostic.line + 6).join('\\n')}\n            `,\n              {\n                line: diagnostic.line + node.position.start.line,\n                column: diagnostic.character,\n              }\n            );\n          } else {\n            file.fail(diagnostic.message, node);\n          }\n        }\n      }\n\n      return assembleReplacementNodes(\n        node,\n        file,\n        virtualFolder,\n        virtualFiles,\n        transpilationResult,\n        postProcessTs,\n        postProcessTranspiledJs\n      );\n    });\n  };\n};\n\nfunction defaultAssembleReplacementNodes(\n  node: CodeNode,\n  file: VFile,\n  virtualFolder: string,\n  virtualFiles: Record<string, VirtualFile>,\n  transpilationResult: Record<string, TranspiledFile>,\n  postProcessTs: PostProcessor,\n  postProcessTranspiledJs: PostProcessor\n) {\n  return [\n    {\n      type: 'jsx',\n      value: `\n    <Tabs\n      groupId=\"language\"\n      defaultValue=\"ts\"\n      values={[\n        { label: 'TypeScript', value: 'ts', },\n        { label: 'JavaScript', value: 'js', },\n      ]}\n    >        \n        <TabItem value=\"ts\">`,\n    },\n    {\n      ...node,\n      value: rearrangeFiles(\n        postProcessTs(virtualFiles, file.path, defaultPostProcessTs),\n        virtualFolder\n      ),\n    },\n    {\n      type: 'jsx',\n      value: `\n        </TabItem>\n        <TabItem value=\"js\">`,\n    },\n    {\n      ...node,\n      lang: 'js',\n      value: rearrangeFiles(\n        postProcessTranspiledJs(\n          transpilationResult,\n          file.path,\n          defaultPostProcessTranspiledJs\n        ),\n        virtualFolder\n      ),\n    },\n    {\n      type: 'jsx',\n      value: `\n        </TabItem>\n    </Tabs>`,\n    },\n  ];\n}\n\nfunction splitFiles(fullCode: string, folder: string) {\n  const regex = /^\\/\\/ file: ([\\w\\-./]+)(?: (.*))?\\s*$/gm;\n  let match = regex.exec(fullCode);\n\n  let files: VirtualFiles = {};\n\n  do {\n    const start = match ? match.index + match[0].length + 1 : 0;\n    const fileName = match ? match[1] : 'index.ts';\n    const flags = (match ? match[2] || '' : '').split(' ');\n    const skip = flags.includes('noEmit');\n    match = regex.exec(fullCode);\n    const end = match ? match.index : fullCode.length;\n    const code = fullCode.substring(start, end);\n    files[`${folder}/${fileName}`] = { code, skip };\n  } while (match);\n\n  return files;\n}\n\nfunction rearrangeFiles(files: VirtualFiles, folder: string) {\n  const filteredFiles = Object.entries(files).filter(([, { skip }]) => !skip);\n\n  if (filteredFiles.length === 1) {\n    const [[, { code }]] = filteredFiles;\n    return code;\n  }\n\n  return filteredFiles\n    .map(\n      ([fileName, { code }]) => `// file: ${fileName.replace(folder + '/', '')}\n${code.trim()}`\n    )\n    .join('\\n\\n\\n');\n}\n"],"names":["getJSDocCommentRanges","node","text","commentRanges","kind","ts","SyntaxKind","Parameter","TypeParameter","FunctionExpression","ArrowFunction","ParenthesizedExpression","VariableDeclaration","VariableStatement","push","getTrailingCommentRanges","pos","getLeadingCommentRanges","filter","comment","charCodeAt","renderDocNode","docNode","Array","isArray","map","join","result","tsdoc","code","toString","meta","replace","_line","metaMatch","language","content","getChildNodes","childNode","Extractor","tsconfig","rootFiles","basedir","configFile","readConfigFile","sys","readFile","compilerOptions","parseJsonConfigFileContent","config","options","compilerHost","createCompilerHost","program","createProgram","file","path","resolve","findTokens","token","split","lookFor","tail","found","forEachChild","child","isVariableStatement","declarationList","declarations","length","name","isIdentifier","escapedText","isVariableDeclaration","initializer","getComment","fileName","overload","inputFileName","sourceFile","getSourceFile","Error","foundComments","buffer","getFullText","comments","compilerNode","textRange","fromStringRange","end","customConfiguration","addTagDefinition","tagName","syntaxKind","BlockTag","tsdocParser","selectedOverload","console","warn","parserContext","parseRange","docComment","Object","assign","overloadSummary","customBlocks","find","byTagName","overloadRemarks","examples","block","blockTag","extractors","WeakMap","attacher","extractorSettings","has","set","extractor","get","parseNodes","markdown","parse","children","renderAsMarkdown","key","prepare","str","render","docBlock","rendered","sectionMapping","summary","s","remarks","params","transformer","tree","flatMap","mapper","parent","type","url","startsWith","value","sections","trim","URL","host","pathname","args","searchParams","Number","parseInt","retVal","reduce","acc","section","keys","concat","visit","trimEnd","Compiler","settings","externalResolutions","service","createLanguageService","createDocumentRegistry","compile","files","setScriptFileNames","entries","writeFile","returnFiles","emitResult","getEmitOutput","emittedFile","outputFiles","endsWith","transpiledCode","allDiagnostics","getCompilerOptionsDiagnostics","getSyntacticDiagnostics","getSemanticDiagnostics","diagnostics","diagnostic","message","flattenDiagnosticMessageText","messageText","start","getLineAndCharacterOfPosition","line","character","virtualFiles","scriptFileNames","getCompilationSettings","fileExists","normalize","virtual","contents","version","directoryExists","dirName","normalized","some","getScriptFileNames","getScriptSnapshot","ScriptSnapshot","fromString","undefined","getScriptVersion","String","getModifiedTime","resolveModuleNames","moduleNames","containingFile","moduleName","resolved","resolvedModule","resolveModuleName","resolvedPath","packageId","postProcessTs","parentFile","fromEntries","prettyCode","prettify","postProcessTranspiledJs","mangledCode","lastConfig","lastParentFile","sourceCode","prettier","resolveConfig","sync","error","format","filepath","ret","compilers","compilerSettings","defaultPostProcessTranspiledJs","defaultPostProcessTs","assembleReplacementNodes","defaultAssembleReplacementNodes","fileExtensions","compiler","extname","includes","hasTabsImport","hasTabItemImport","test","unshift","codeBlock","lang","tags","virtualFolder","splitFiles","transpilationResult","position","lines","lineNo","padStart","fail","slice","Math","max","column","rearrangeFiles","fullCode","folder","regex","match","exec","index","flags","skip","substring","filteredFiles"],"mappings":"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"}